
SWC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000446  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003d2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800100  00800100  00000446  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000446  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000478  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  000004b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ee5  00000000  00000000  00000550  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c4f  00000000  00000000  00001435  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006a7  00000000  00000000  00002084  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  0000272c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000602  00000000  00000000  000028ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000435  00000000  00000000  00002eae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  000032e3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	57 c0       	rjmp	.+174    	; 0xb4 <__bad_interrupt>
   6:	00 00       	nop
   8:	55 c0       	rjmp	.+170    	; 0xb4 <__bad_interrupt>
   a:	00 00       	nop
   c:	53 c0       	rjmp	.+166    	; 0xb4 <__bad_interrupt>
   e:	00 00       	nop
  10:	51 c0       	rjmp	.+162    	; 0xb4 <__bad_interrupt>
  12:	00 00       	nop
  14:	4f c0       	rjmp	.+158    	; 0xb4 <__bad_interrupt>
  16:	00 00       	nop
  18:	4d c0       	rjmp	.+154    	; 0xb4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4b c0       	rjmp	.+150    	; 0xb4 <__bad_interrupt>
  1e:	00 00       	nop
  20:	49 c0       	rjmp	.+146    	; 0xb4 <__bad_interrupt>
  22:	00 00       	nop
  24:	47 c0       	rjmp	.+142    	; 0xb4 <__bad_interrupt>
  26:	00 00       	nop
  28:	45 c0       	rjmp	.+138    	; 0xb4 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	43 c0       	rjmp	.+134    	; 0xb4 <__bad_interrupt>
  2e:	00 00       	nop
  30:	41 c0       	rjmp	.+130    	; 0xb4 <__bad_interrupt>
  32:	00 00       	nop
  34:	3f c0       	rjmp	.+126    	; 0xb4 <__bad_interrupt>
  36:	00 00       	nop
  38:	3d c0       	rjmp	.+122    	; 0xb4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3b c0       	rjmp	.+118    	; 0xb4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	81 c1       	rjmp	.+770    	; 0x344 <__vector_16>
  42:	00 00       	nop
  44:	37 c0       	rjmp	.+110    	; 0xb4 <__bad_interrupt>
  46:	00 00       	nop
  48:	35 c0       	rjmp	.+106    	; 0xb4 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	33 c0       	rjmp	.+102    	; 0xb4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	31 c0       	rjmp	.+98     	; 0xb4 <__bad_interrupt>
  52:	00 00       	nop
  54:	2f c0       	rjmp	.+94     	; 0xb4 <__bad_interrupt>
  56:	00 00       	nop
  58:	2d c0       	rjmp	.+90     	; 0xb4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2b c0       	rjmp	.+86     	; 0xb4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	29 c0       	rjmp	.+82     	; 0xb4 <__bad_interrupt>
  62:	00 00       	nop
  64:	27 c0       	rjmp	.+78     	; 0xb4 <__bad_interrupt>
  66:	00 00       	nop
  68:	25 c0       	rjmp	.+74     	; 0xb4 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	23 c0       	rjmp	.+70     	; 0xb4 <__bad_interrupt>
  6e:	00 00       	nop
  70:	21 c0       	rjmp	.+66     	; 0xb4 <__bad_interrupt>
  72:	00 00       	nop
  74:	1f c0       	rjmp	.+62     	; 0xb4 <__bad_interrupt>
  76:	00 00       	nop
  78:	1d c0       	rjmp	.+58     	; 0xb4 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1b c0       	rjmp	.+54     	; 0xb4 <__bad_interrupt>
  7e:	00 00       	nop
  80:	19 c0       	rjmp	.+50     	; 0xb4 <__bad_interrupt>
  82:	00 00       	nop
  84:	17 c0       	rjmp	.+46     	; 0xb4 <__bad_interrupt>
  86:	00 00       	nop
  88:	15 c0       	rjmp	.+42     	; 0xb4 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	13 c0       	rjmp	.+38     	; 0xb4 <__bad_interrupt>
  8e:	00 00       	nop
  90:	11 c0       	rjmp	.+34     	; 0xb4 <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_clear_bss>:
  a0:	21 e0       	ldi	r18, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
  a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
  aa:	a1 31       	cpi	r26, 0x11	; 17
  ac:	b2 07       	cpc	r27, r18
  ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>
  b0:	21 d1       	rcall	.+578    	; 0x2f4 <main>
  b2:	8d c1       	rjmp	.+794    	; 0x3ce <_exit>

000000b4 <__bad_interrupt>:
  b4:	a5 cf       	rjmp	.-182    	; 0x0 <__vectors>

000000b6 <can_check_free>:
		CANPAGE = (to_receive->mob_number << MOBNB0) | (1 << AINC) | byte;
		data[byte] = CANMSG;
	}
	
	
}
  b6:	88 30       	cpi	r24, 0x08	; 8
  b8:	78 f0       	brcs	.+30     	; 0xd8 <can_check_free+0x22>
  ba:	20 91 dd 00 	lds	r18, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
  be:	30 e0       	ldi	r19, 0x00	; 0
  c0:	88 50       	subi	r24, 0x08	; 8
  c2:	a9 01       	movw	r20, r18
  c4:	02 c0       	rjmp	.+4      	; 0xca <can_check_free+0x14>
  c6:	55 95       	asr	r21
  c8:	47 95       	ror	r20
  ca:	8a 95       	dec	r24
  cc:	e2 f7       	brpl	.-8      	; 0xc6 <can_check_free+0x10>
  ce:	ca 01       	movw	r24, r20
  d0:	51 e0       	ldi	r21, 0x01	; 1
  d2:	85 27       	eor	r24, r21
  d4:	81 70       	andi	r24, 0x01	; 1
  d6:	08 95       	ret
  d8:	20 91 dc 00 	lds	r18, 0x00DC	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	a9 01       	movw	r20, r18
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <can_check_free+0x30>
  e2:	55 95       	asr	r21
  e4:	47 95       	ror	r20
  e6:	8a 95       	dec	r24
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <can_check_free+0x2c>
  ea:	ca 01       	movw	r24, r20
  ec:	51 e0       	ldi	r21, 0x01	; 1
  ee:	85 27       	eor	r24, r21
  f0:	81 70       	andi	r24, 0x01	; 1
  f2:	08 95       	ret

000000f4 <can_cfg>:
  f4:	3f 92       	push	r3
  f6:	4f 92       	push	r4
  f8:	5f 92       	push	r5
  fa:	6f 92       	push	r6
  fc:	7f 92       	push	r7
  fe:	8f 92       	push	r8
 100:	9f 92       	push	r9
 102:	af 92       	push	r10
 104:	bf 92       	push	r11
 106:	cf 92       	push	r12
 108:	df 92       	push	r13
 10a:	ef 92       	push	r14
 10c:	ff 92       	push	r15
 10e:	0f 93       	push	r16
 110:	1f 93       	push	r17
 112:	cf 93       	push	r28
 114:	df 93       	push	r29
 116:	10 92 d8 00 	sts	0x00D8, r1	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 11a:	20 e0       	ldi	r18, 0x00	; 0
 11c:	30 e0       	ldi	r19, 0x00	; 0
 11e:	ed ee       	ldi	r30, 0xED	; 237
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	0f 2e       	mov	r0, r31
 124:	fe ee       	ldi	r31, 0xEE	; 238
 126:	cf 2e       	mov	r12, r31
 128:	d1 2c       	mov	r13, r1
 12a:	f0 2d       	mov	r31, r0
 12c:	0f 2e       	mov	r0, r31
 12e:	ff ee       	ldi	r31, 0xEF	; 239
 130:	ef 2e       	mov	r14, r31
 132:	f1 2c       	mov	r15, r1
 134:	f0 2d       	mov	r31, r0
 136:	00 ef       	ldi	r16, 0xF0	; 240
 138:	10 e0       	ldi	r17, 0x00	; 0
 13a:	61 ef       	ldi	r22, 0xF1	; 241
 13c:	70 e0       	ldi	r23, 0x00	; 0
 13e:	42 ef       	ldi	r20, 0xF2	; 242
 140:	50 e0       	ldi	r21, 0x00	; 0
 142:	0f 2e       	mov	r0, r31
 144:	f4 ef       	ldi	r31, 0xF4	; 244
 146:	af 2e       	mov	r10, r31
 148:	b1 2c       	mov	r11, r1
 14a:	f0 2d       	mov	r31, r0
 14c:	0f 2e       	mov	r0, r31
 14e:	f5 ef       	ldi	r31, 0xF5	; 245
 150:	8f 2e       	mov	r8, r31
 152:	91 2c       	mov	r9, r1
 154:	f0 2d       	mov	r31, r0
 156:	0f 2e       	mov	r0, r31
 158:	f6 ef       	ldi	r31, 0xF6	; 246
 15a:	6f 2e       	mov	r6, r31
 15c:	71 2c       	mov	r7, r1
 15e:	f0 2d       	mov	r31, r0
 160:	0f 2e       	mov	r0, r31
 162:	f7 ef       	ldi	r31, 0xF7	; 247
 164:	4f 2e       	mov	r4, r31
 166:	51 2c       	mov	r5, r1
 168:	f0 2d       	mov	r31, r0
 16a:	aa ef       	ldi	r26, 0xFA	; 250
 16c:	b0 e0       	ldi	r27, 0x00	; 0
 16e:	c9 01       	movw	r24, r18
 170:	82 95       	swap	r24
 172:	92 95       	swap	r25
 174:	90 7f       	andi	r25, 0xF0	; 240
 176:	98 27       	eor	r25, r24
 178:	80 7f       	andi	r24, 0xF0	; 240
 17a:	98 27       	eor	r25, r24
 17c:	98 2f       	mov	r25, r24
 17e:	98 60       	ori	r25, 0x08	; 8
 180:	90 83       	st	Z, r25
 182:	e6 01       	movw	r28, r12
 184:	18 82       	st	Y, r1
 186:	e7 01       	movw	r28, r14
 188:	18 82       	st	Y, r1
 18a:	e8 01       	movw	r28, r16
 18c:	18 82       	st	Y, r1
 18e:	eb 01       	movw	r28, r22
 190:	18 82       	st	Y, r1
 192:	ea 01       	movw	r28, r20
 194:	18 82       	st	Y, r1
 196:	c3 ef       	ldi	r28, 0xF3	; 243
 198:	d0 e0       	ldi	r29, 0x00	; 0
 19a:	18 82       	st	Y, r1
 19c:	e5 01       	movw	r28, r10
 19e:	18 82       	st	Y, r1
 1a0:	e4 01       	movw	r28, r8
 1a2:	18 82       	st	Y, r1
 1a4:	e3 01       	movw	r28, r6
 1a6:	18 82       	st	Y, r1
 1a8:	e2 01       	movw	r28, r4
 1aa:	18 82       	st	Y, r1
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	88 60       	ori	r24, 0x08	; 8
 1b0:	38 2e       	mov	r3, r24
 1b2:	39 2a       	or	r3, r25
 1b4:	30 82       	st	Z, r3
 1b6:	1c 92       	st	X, r1
 1b8:	9f 5f       	subi	r25, 0xFF	; 255
 1ba:	98 30       	cpi	r25, 0x08	; 8
 1bc:	c9 f7       	brne	.-14     	; 0x1b0 <can_cfg+0xbc>
 1be:	2f 5f       	subi	r18, 0xFF	; 255
 1c0:	3f 4f       	sbci	r19, 0xFF	; 255
 1c2:	2f 30       	cpi	r18, 0x0F	; 15
 1c4:	31 05       	cpc	r19, r1
 1c6:	99 f6       	brne	.-90     	; 0x16e <can_cfg+0x7a>
 1c8:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 1cc:	8c e0       	ldi	r24, 0x0C	; 12
 1ce:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
 1d2:	86 e3       	ldi	r24, 0x36	; 54
 1d4:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 1d8:	10 92 db 00 	sts	0x00DB, r1	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
 1dc:	e8 ed       	ldi	r30, 0xD8	; 216
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	80 81       	ld	r24, Z
 1e2:	82 60       	ori	r24, 0x02	; 2
 1e4:	80 83       	st	Z, r24
 1e6:	df 91       	pop	r29
 1e8:	cf 91       	pop	r28
 1ea:	1f 91       	pop	r17
 1ec:	0f 91       	pop	r16
 1ee:	ff 90       	pop	r15
 1f0:	ef 90       	pop	r14
 1f2:	df 90       	pop	r13
 1f4:	cf 90       	pop	r12
 1f6:	bf 90       	pop	r11
 1f8:	af 90       	pop	r10
 1fa:	9f 90       	pop	r9
 1fc:	8f 90       	pop	r8
 1fe:	7f 90       	pop	r7
 200:	6f 90       	pop	r6
 202:	5f 90       	pop	r5
 204:	4f 90       	pop	r4
 206:	3f 90       	pop	r3
 208:	08 95       	ret

0000020a <can_tx>:
void can_tx(struct CAN_MOB *to_send, uint8_t *data){
 20a:	cf 93       	push	r28
 20c:	df 93       	push	r29
 20e:	ec 01       	movw	r28, r24
 210:	fb 01       	movw	r30, r22
	
	for(uint8_t byte = 0; byte <8; byte++){
 212:	20 e0       	ldi	r18, 0x00	; 0
		CANPAGE = (to_send->mob_number << MOBNB0) | (1 << AINC) | byte;
 214:	4d ee       	ldi	r20, 0xED	; 237
 216:	50 e0       	ldi	r21, 0x00	; 0
		CANMSG = data[byte];
 218:	6a ef       	ldi	r22, 0xFA	; 250
 21a:	70 e0       	ldi	r23, 0x00	; 0
	
}
void can_tx(struct CAN_MOB *to_send, uint8_t *data){
	
	for(uint8_t byte = 0; byte <8; byte++){
		CANPAGE = (to_send->mob_number << MOBNB0) | (1 << AINC) | byte;
 21c:	8c 81       	ldd	r24, Y+4	; 0x04
 21e:	30 e1       	ldi	r19, 0x10	; 16
 220:	83 9f       	mul	r24, r19
 222:	c0 01       	movw	r24, r0
 224:	11 24       	eor	r1, r1
 226:	88 60       	ori	r24, 0x08	; 8
 228:	82 2b       	or	r24, r18
 22a:	da 01       	movw	r26, r20
 22c:	8c 93       	st	X, r24
		CANMSG = data[byte];
 22e:	81 91       	ld	r24, Z+
 230:	db 01       	movw	r26, r22
 232:	8c 93       	st	X, r24
	
	
}
void can_tx(struct CAN_MOB *to_send, uint8_t *data){
	
	for(uint8_t byte = 0; byte <8; byte++){
 234:	2f 5f       	subi	r18, 0xFF	; 255
 236:	28 30       	cpi	r18, 0x08	; 8
 238:	89 f7       	brne	.-30     	; 0x21c <can_tx+0x12>
		CANPAGE = (to_send->mob_number << MOBNB0) | (1 << AINC) | byte;
		CANMSG = data[byte];
	}
	
	CANPAGE = to_send->mob_number << MOBNB0;
 23a:	8c 81       	ldd	r24, Y+4	; 0x04
 23c:	82 95       	swap	r24
 23e:	80 7f       	andi	r24, 0xF0	; 240
 240:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	if (can_check_free(to_send->mob_number)){
 244:	8c 81       	ldd	r24, Y+4	; 0x04
 246:	37 df       	rcall	.-402    	; 0xb6 <can_check_free>
 248:	88 23       	and	r24, r24
 24a:	21 f1       	breq	.+72     	; 0x294 <can_tx+0x8a>
		CANSTMOB = 0;
 24c:	ee ee       	ldi	r30, 0xEE	; 238
 24e:	f0 e0       	ldi	r31, 0x00	; 0
 250:	10 82       	st	Z, r1
		CANIDT1 = to_send->mob_id>>3;
 252:	88 81       	ld	r24, Y
 254:	99 81       	ldd	r25, Y+1	; 0x01
 256:	96 95       	lsr	r25
 258:	87 95       	ror	r24
 25a:	96 95       	lsr	r25
 25c:	87 95       	ror	r24
 25e:	96 95       	lsr	r25
 260:	87 95       	ror	r24
 262:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
		CANIDT2 = (to_send->mob_id << 5) & 0b11100000;
 266:	88 81       	ld	r24, Y
 268:	82 95       	swap	r24
 26a:	88 0f       	add	r24, r24
 26c:	80 7e       	andi	r24, 0xE0	; 224
 26e:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
		CANIDT3 = 0;
 272:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
		CANIDT4 = 0;
 276:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
		CANIDM1 = 0; //0b11111111;
 27a:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
		CANIDM2 = 0; //0b11100000;
 27e:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
		CANIDM3 = 0;
 282:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
		CANIDM4 = 0;
 286:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
		CANSTMOB = 0;
 28a:	10 82       	st	Z, r1
		CANCDMOB = (1<<CONMOB0) | 1 << DLC3;
 28c:	88 e4       	ldi	r24, 0x48	; 72
 28e:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
		CANSTMOB = 0;
 292:	10 82       	st	Z, r1
	}
	
}
 294:	df 91       	pop	r29
 296:	cf 91       	pop	r28
 298:	08 95       	ret

0000029a <read_inputs>:
		
	}
}


void read_inputs(){
 29a:	cf 93       	push	r28
 29c:	df 93       	push	r29
	
	mob_0_data[0] = graytobcd((~PINB)&0b00001111);
 29e:	83 b1       	in	r24, 0x03	; 3
 2a0:	80 95       	com	r24
 2a2:	8f 70       	andi	r24, 0x0F	; 15
 2a4:	79 d0       	rcall	.+242    	; 0x398 <graytobcd>
 2a6:	c4 e0       	ldi	r28, 0x04	; 4
 2a8:	d1 e0       	ldi	r29, 0x01	; 1
 2aa:	88 83       	st	Y, r24
	mob_0_data[1] = graytobcd((~PINB)>>4);
 2ac:	83 b1       	in	r24, 0x03	; 3
 2ae:	82 95       	swap	r24
 2b0:	8f 70       	andi	r24, 0x0F	; 15
 2b2:	80 95       	com	r24
 2b4:	71 d0       	rcall	.+226    	; 0x398 <graytobcd>
 2b6:	89 83       	std	Y+1, r24	; 0x01
	mob_0_data[2] = (((~PINC)>>PC0)&1);
 2b8:	86 b1       	in	r24, 0x06	; 6
 2ba:	80 95       	com	r24
 2bc:	81 70       	andi	r24, 0x01	; 1
 2be:	8a 83       	std	Y+2, r24	; 0x02
	mob_0_data[3] = (((~PINC)>>PC1)&1);
 2c0:	86 b1       	in	r24, 0x06	; 6
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	80 95       	com	r24
 2c6:	90 95       	com	r25
 2c8:	86 95       	lsr	r24
 2ca:	81 70       	andi	r24, 0x01	; 1
 2cc:	8b 83       	std	Y+3, r24	; 0x03
	mob_0_data[4] = (((~PINC)>>PC2)&1);
 2ce:	86 b1       	in	r24, 0x06	; 6
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	80 95       	com	r24
 2d4:	90 95       	com	r25
 2d6:	82 fb       	bst	r24, 2
 2d8:	88 27       	eor	r24, r24
 2da:	80 f9       	bld	r24, 0
 2dc:	8c 83       	std	Y+4, r24	; 0x04
	mob_0_data[5] = (((~PINC)>>PC3)&1);
 2de:	86 b1       	in	r24, 0x06	; 6
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	80 95       	com	r24
 2e4:	90 95       	com	r25
 2e6:	83 fb       	bst	r24, 3
 2e8:	88 27       	eor	r24, r24
 2ea:	80 f9       	bld	r24, 0
 2ec:	8d 83       	std	Y+5, r24	; 0x05
	
}
 2ee:	df 91       	pop	r29
 2f0:	cf 91       	pop	r28
 2f2:	08 95       	ret

000002f4 <main>:



int main(void){
    
	port_config();
 2f4:	4c d0       	rcall	.+152    	; 0x38e <port_config>
	timer_config();
 2f6:	63 d0       	rcall	.+198    	; 0x3be <timer_config>
	can_cfg();
 2f8:	fd de       	rcall	.-518    	; 0xf4 <can_cfg>
 2fa:	ec e0       	ldi	r30, 0x0C	; 12
	mob_to_transmit.mob_id = 0x100;
 2fc:	f1 e0       	ldi	r31, 0x01	; 1
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	91 e0       	ldi	r25, 0x01	; 1
 302:	91 83       	std	Z+1, r25	; 0x01
 304:	80 83       	st	Z, r24
 306:	13 82       	std	Z+3, r1	; 0x03
	mob_to_transmit.mob_idmask = 0;
 308:	12 82       	std	Z+2, r1	; 0x02
 30a:	14 82       	std	Z+4, r1	; 0x04
	mob_to_transmit.mob_number = 0;
 30c:	78 94       	sei
	
	sei();
 30e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
	
    while (1){
		
		if(system_time > 10){
 312:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 316:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <_edata+0x2>
 31a:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <_edata+0x3>
 31e:	0b 97       	sbiw	r24, 0x0b	; 11
 320:	a1 05       	cpc	r26, r1
 322:	b1 05       	cpc	r27, r1
 324:	a0 f3       	brcs	.-24     	; 0x30e <main+0x1a>
 326:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			system_time = 0;
 32a:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 32e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <_edata+0x2>
 332:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <_edata+0x3>
			read_inputs();
 336:	b1 df       	rcall	.-158    	; 0x29a <read_inputs>
 338:	64 e0       	ldi	r22, 0x04	; 4
			can_tx(&mob_to_transmit, mob_0_data);
 33a:	71 e0       	ldi	r23, 0x01	; 1
 33c:	8c e0       	ldi	r24, 0x0C	; 12
 33e:	91 e0       	ldi	r25, 0x01	; 1
 340:	64 df       	rcall	.-312    	; 0x20a <can_tx>
 342:	e5 cf       	rjmp	.-54     	; 0x30e <main+0x1a>

00000344 <__vector_16>:
 344:	1f 92       	push	r1
	mob_0_data[5] = (((~PINC)>>PC3)&1);
	
}


ISR(TIMER0_COMP_vect){
 346:	0f 92       	push	r0
 348:	0f b6       	in	r0, 0x3f	; 63
 34a:	0f 92       	push	r0
 34c:	11 24       	eor	r1, r1
 34e:	8f 93       	push	r24
 350:	9f 93       	push	r25
 352:	af 93       	push	r26
 354:	bf 93       	push	r27
		
	system_time++; //system time generation
 356:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 35a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 35e:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <_edata+0x2>
 362:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <_edata+0x3>
 366:	01 96       	adiw	r24, 0x01	; 1
 368:	a1 1d       	adc	r26, r1
 36a:	b1 1d       	adc	r27, r1
 36c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 370:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 374:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <_edata+0x2>
 378:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <_edata+0x3>
	
}
 37c:	bf 91       	pop	r27
 37e:	af 91       	pop	r26
 380:	9f 91       	pop	r25
 382:	8f 91       	pop	r24
 384:	0f 90       	pop	r0
 386:	0f be       	out	0x3f, r0	; 63
 388:	0f 90       	pop	r0
 38a:	1f 90       	pop	r1
 38c:	18 95       	reti

0000038e <port_config>:


void port_config(){
	
	
	PORTB = 0b11111111;
 38e:	8f ef       	ldi	r24, 0xFF	; 255
 390:	85 b9       	out	0x05, r24	; 5
	PORTC = 0b00001111;
 392:	8f e0       	ldi	r24, 0x0F	; 15
 394:	88 b9       	out	0x08, r24	; 8
 396:	08 95       	ret

00000398 <graytobcd>:
	
	
}
uint8_t graytobcd(uint8_t graycode){

		uint8_t returnvalue = graycode & 0b00001000;
 398:	38 2f       	mov	r19, r24
 39a:	38 70       	andi	r19, 0x08	; 8
		returnvalue |= (graycode ^ (returnvalue >> 1)) & 0b00000100;
 39c:	93 2f       	mov	r25, r19
 39e:	96 95       	lsr	r25
 3a0:	98 27       	eor	r25, r24
 3a2:	94 70       	andi	r25, 0x04	; 4
 3a4:	29 2f       	mov	r18, r25
 3a6:	23 2b       	or	r18, r19
		returnvalue |= (graycode ^ (returnvalue >> 1)) & 0b00000010;
 3a8:	92 2f       	mov	r25, r18
 3aa:	96 95       	lsr	r25
 3ac:	98 27       	eor	r25, r24
 3ae:	92 70       	andi	r25, 0x02	; 2
 3b0:	92 2b       	or	r25, r18
		returnvalue |= (graycode ^ (returnvalue >> 1)) & 0b00000001;
 3b2:	29 2f       	mov	r18, r25
 3b4:	26 95       	lsr	r18
 3b6:	82 27       	eor	r24, r18
 3b8:	81 70       	andi	r24, 0x01	; 1
		return returnvalue;
		
}
 3ba:	89 2b       	or	r24, r25
 3bc:	08 95       	ret

000003be <timer_config>:
void timer_config(){


	//8 bit Timer 0 config
	//ctc mode and 64 as prescaler
	TCCR0A = 0 | (1<<WGM01) /*| (1<<COM0A1) */| (1<<CS01) | (1<<CS00);
 3be:	8b e0       	ldi	r24, 0x0B	; 11
 3c0:	84 bd       	out	0x24, r24	; 36
	TIMSK0 = 0 | (1<<OCF0A); //compare interrupt enable
 3c2:	82 e0       	ldi	r24, 0x02	; 2
 3c4:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	OCR0A = 250-1; // compare value for 1ms;
 3c8:	89 ef       	ldi	r24, 0xF9	; 249
 3ca:	87 bd       	out	0x27, r24	; 39
 3cc:	08 95       	ret

000003ce <_exit>:
 3ce:	f8 94       	cli

000003d0 <__stop_program>:
 3d0:	ff cf       	rjmp	.-2      	; 0x3d0 <__stop_program>
